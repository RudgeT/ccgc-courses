@using System.Text
@using System.Threading
@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.AspNetCore.Components.RenderTree
@using Microsoft.Extensions.Options

@namespace Web.Components
@inject Toolbelt.Blazor.HeadElement.IHeadElementHelper HeadElementHelper
@inject IJSRuntime JSRuntime

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private bool _ScriptEnabled = false;
    private SemaphoreSlim SemaphoreSlim = new SemaphoreSlim(1, 1);

    protected override async Task OnParametersSetAsync()
    {
        var renderTreeBuilder = new RenderTreeBuilder();
        this.ChildContent(renderTreeBuilder);

        var frames = renderTreeBuilder.GetFrames();
        var title = new StringBuilder();
        for (var i = 0; i < frames.Count; i++)
        {
            var frame = frames.Array[i];

            title.Append(frame.MarkupContent);
        }
        await Task.Delay(1);
        if (await EnsureScriptEnabledAsync())
        {
            await JSRuntime.InvokeVoidAsync("setBreadcrumb", title.ToString());
        }


    }

    private async ValueTask<bool> EnsureScriptEnabledAsync()
    {
        if (_ScriptEnabled || JSRuntime == null) return _ScriptEnabled;

        await SemaphoreSlim.WaitAsync();
        try
        {
            if (_ScriptEnabled) return _ScriptEnabled;

            await JSRuntime.InvokeVoidAsync("eval", "0");

            _ScriptEnabled = true;
        }
        catch { }
        finally { SemaphoreSlim.Release(); }
        return _ScriptEnabled;
    }
}